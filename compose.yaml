compose:
  - call: lcod://resolver/internal/load-descriptor@1
    in:
      projectPath: $.projectPath
    out:
      descriptor: descriptor
      descriptorText: descriptorText
      descriptorPath: descriptorPath

  - call: lcod://resolver/internal/load-config@1
    in:
      projectPath: $.projectPath
      configPath: $.configPath
    out:
      config: resolverConfig
      configPath: resolvedConfigPath
      warnings: configWarnings

  - call: lcod://resolver/internal/lock-path@1
    in:
      projectPath: $.projectPath
      outputPath: $.outputPath
    out:
      lockPath: lockPath

  - call: lcod://resolver/internal/prepare-config@1
    in:
      resolverConfig: $.resolverConfig
      config: $.config
      warnings: $.configWarnings
    out:
      normalizedConfig: normalizedConfig
      warnings: normalizedWarnings

  - call: lcod://resolver/internal/prepare-cache@1
    in:
      projectPath: $.projectPath
    out:
      cacheRoot: cacheRoot

  - call: lcod://resolver/internal/resolve-dependencies@1
    in:
      projectPath: $.projectPath
      cacheRoot: $.cacheRoot
      normalizedConfig: $.normalizedConfig
      rootId: $.descriptor.id
      rootDescriptor: $.descriptor
      rootDescriptorText: $.descriptorText
      warnings: $.normalizedWarnings
    out:
      resolverResult: resolverResult
      warnings: resolveWarnings

  - call: lcod://resolver/internal/summarize-result@1
    in:
      resolverResult: $.resolverResult
      warnings: $.resolveWarnings
    out:
      dependencyGraph: dependencyGraph
      rootIntegrity: rootIntegrity
      warnings: collectedWarnings

  - call: lcod://resolver/internal/build-lock@1
    in:
      descriptor: $.descriptor
      dependencyGraph: $.dependencyGraph
      warnings: $.collectedWarnings
      rootIntegrity: $.rootIntegrity
    out:
      lockDocument: lockDocument
      lockText: lockText

  - call: lcod://axiom/fs/write-file@1
    in:
      path: $.lockPath
      data: $.lockText
      createParents: true
    out:
      ok: wrote

  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => ({
          lockPath: state.lockPath,
          components: Array.isArray(state.components) ? state.components : [],
          warnings: Array.isArray(state.warnings) && state.warnings.length > 0
            ? state.warnings
            : undefined
        })
      input:
        lockPath: $.lockPath
        components: $.lockDocument.components
        warnings: $.warnings
    out:
      lockPath: lockPath
      components: components
      warnings: warnings
